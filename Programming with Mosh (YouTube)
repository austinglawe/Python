https://www.youtube.com/watch?v=_uQrJ0TkZlc&ab_channel=ProgrammingwithMosh

## Your First Python Code:

--INPUT:
print("Austin Glawe")
print("o----")
print(" ||||")
print('*' * 10)

---OUTPUT:
Austin Glawe
o----
 ||||
**********



## Variables

price = 10
price = 20
print(price)
# price = 20 now because code is read line by line and can be updated
rating = 4.9
my_name = 'Austin'
is_published = True
# Python is sensitive to upper- and lowercase characters
# Always use lowercase letters
# but python words False and True need to be uppercase for T or F
# _ (underscores are used instead of spaces)
# price, rating, my_name are all variables
# Integer is a whole number (like price)
# Float is a number with a decimal (like rating)
# Strings are characters that are not numbers
# Boolean values are True or False

# We check in a patient named John Smith. He's 20 years old and is a new patient.
# Create 3 variables to define these factors above
name = "John Smith"
age = 20
is_new = True


the input() function is a built in function.
name = input('What is your name? ')
 print ('Hi ' + name)
# concatenating (combining) this string with another string


# Ask what the name is of a person. Then ask their favorite color.
# print these.
name = input('What is your name? ')
fav_color = input(name + ',what is your favorite color? ')
print(name + "'s favorite color is " + fav_color)




# We want to find your age based on an input of your birth year

birth_year = input('Birth year: ')
age = 2023 - birth_year
print(age)
## However this doesn't work, this error appears below:

Traceback (most recent call last):
  File "C:\Users\austi\PycharmProjects\HelloWorld1\app1.py", line 2, in <module>
    age = 2023 - birth_year
TypeError: unsupported operand type(s) for -: 'int' and 'str'

## It is saying that you can't take and integer (2023) and subtract a string (input of age) from it
## It would be like saying:
## 2023 - '1995'
## Anything typed in an input terminal is ALWAYS a string.




birth_year = input('Birth year: ')
birth_year = int(birth_year)
age = 2023 - birth_year
print(age)


## Other inputs are bool() [meaning True or False] and float() [number with a decimal]

## Find the class (or type)

birth_year = input('Birth year: ')
print(type(birth_year))
birth_year = int(birth_year)
age = 2023 - birth_year
print(type(age))
print(age)

Birth year: 1995
<class 'str'>
<class 'int'>
28


# Ask a user their weight (in pounds), convert it to kilograms
# and then print it on the terminal

name = input("Hello, what is your name?")
weight = input("Hello " + name + ", it is nice to meet you."
                                 "How much do you weigh in lbs?")

weight_kg = int(weight) * 0.45
weight_kg = str(weight_kg)

print(name + ", your weigh " + weight_kg + " kg.")



## If you need to have an apostrophe in the middle of a string. Use double quotes ("")
## Otherwise it will mess things up and when the apostrophe appears, it will think that it's the end of your string
course = "Python's Course for Beginners"
print(course)

## if you need to have double quotes then use single quotes like so:
course = 'Python for "Beginners"'
print(course)

## You can also use triple quotes (''' ''') - to define a string with multiple lines
course = '''
Hi John,

Here is our first email to you.

Thank you,
The support team

'''
print(course)


## Find the value of the first position in the string
course = 'Python for Beginners'
print(course[0])
OUTPUT: P

## You can also go from a negative position. It will start at the last character and go however many characters to the left
course = 'Python for Beginners'
print(course[-2])
OUTPUT: r

## To get multiple charcters
course = 'Python for Beginners'
print(course[0:3])
OUTPUT: Pyt
## The number before the colon (:) is inclusive, the number after it is exclusive
## This means it will include everything before the colon and will only go to the point on the right of the colon
## It will stop before printing the 3 spot (h)
course = 'Python for Beginners'
print(course[0:4])
OUTPUT: Pyth

## You can also start at a certain point in the string and have it return all values after that point
## Like so:
course = 'Python for Beginners'
print(course[4:])
OUTPUT: on for Beginners

## And you can do the opposite to have the start and only go to a certain point.
## Like so:
course = 'Python for Beginners'
print(course[:9])
OUTPUT: Python fo

## To take off the last Character, you can do this:
course = 'Python for Beginners'
print(course[:-1])
OUTPUT: Python for Beginner

## To print only the last given number of characters, you can do this:
course = 'Python for Beginners'
print(course[-6:])
OUTPUT: inners

## To copy or clone a string:
course = 'Python for Beginners'
print(course[:])
## or
course = 'Python for Beginners'
another = course[:]
print(another)

## To start at a certain point in the string and also take off a piece of the ending
## Here is an example:
course = 'Python for Beginners'
print(course[1:-1])
OUTPUT: ython for Beginner


## formatting strings start with f''
first_name = 'John'
last_name = 'Smith'
message = first_name + '[' + last_name + '] is a coder'
msg = f'{first_name} [{last_name}] is a coder'
print(msg)
OUTPUT: John [Smith] is a coder

## Calculate the number of characters in a string
course = 'Python for Beginners'
print(len(course))
OUTPUT: 20

## methods are like a function but the are whatever piece of information . then the method you want to execute
## Print all characters in uppercase
course = 'Python for Beginners'
print(course.upper())
print(course)
OUTPUT: PYTHON FOR BEGINNERS
Python for Beginners

# This does not change what course is.

## Print all characters in lowercase
course = 'Python for Beginners'
print(course.lower())

## the find method locates the position of the first character you want to find
## This method is case sensitive
course = 'Python for Beginners'
print(course.find('f'))
OUTPUT: 7

## In the case below, it will print where that string starts
course = 'Python for Beginners'
print(course.find('Beginners')
OUTPUT: 11


## To replace a string you can use the replace method. This method is also case sensitive.
course = 'Python for Beginners'
print(course.replace('Beginners', 'Albsolute Beginners'))
OUTPUT: Python for Albsolute Beginners

course = 'Python for Beginners'
print(course.replace('P','J'))
OUTPUT: Jython for Beginners

## To see if a particular character or word is where you are looking; Boolean value is returned (True, False)
course = 'Python for Beginners'
print('Python' in course)
OUTPUT: True

course = 'Python for Beginners'
print('python' in course)
OUTPUT: False

#### Arithmetic Operators
## Addition
print(10 + 3)
OUTPUT: 13
## Subtraction
print(10 - 3)
OUTPUT: 7
## Multiplication
print(10 * 3)
OUTPUT: 30
## Floating point number
print(10 / 3)
OUTPUT: 3.33333333333335
## Integer
print(10 // 3)
OUTPUT: 3
## to get remainder of division - modulo
print(10 % 3)
OUTPUT: 1
## Exponents (powers) below is 10 to the power of 3
print(10 ** 3)
OUTPUT: 1000

## Incrementing Numbers
x = 10
x = 10 + 3
#print(x)
#OUTPUT: 13

## Augmented Assignment Operators do this in a shorter form
x = 10
x += 3
print(x)
OUTPUT: 13

x = 10
x -= 3
print(x)
OUTPUT: 7

x = 10
x *= 3
print(x)
OUTPUT: 30

x = 10
x **= 3
print(x)
OUTPUT: 1000

x = 10
x /= 3
print(x)
OUTPUT: 3.3333333335

x = 10
x //= 3
print(x)
OUTPUT: 3


x = 10
x %= 3
print(x)
OUTPUT: 1

## Operator Precedence or Order of Operations
x = 10 + 3 * 2
# x = 16
## PEDMAS (Parentheses, Exponents, Division, Multiplication, Addition, Subtract
## Parentheses
## Exponentiation 2 ** 3
## Multiplication or Division
## Addition or Subtraction

x = (8**2 + 4/2)**2 + 8/3 - 4*5
print(x)
OUTPUT: 4338.666666666667

##The order of this goes as follows
## x = (64 + 4/2)**2 + 8/3 - 4*5
## x = (64 + 2)**2 + 8/3 - 4*5
## x = (66)**2 + 8/3 - 4*5
## x = 4356 + 8/3 - 4*5
## x = 4356 + 8/3 - 20
## x = 4356 + 2.6666666666666665 - 20
## x = 4358.6666666666666665 - 20
## x = 4338.666666666667
### It rounds a little differently


### Using some functions
## Round
x = 2.9
print(round(x))
OUTPUT: 3

x = 2.4
print(round(x))
OUTPUT: 2

x = 2.5
print(round(x))
OUTPUT: 2

x = 2.51
print(round(x))
OUTPUT: 3

## Absolute Value
x = -2.51
print(abs(x))


### Python has modules (which are like stores for certain data)
## Python has a math module for reusable functions for performing mathematical calculations
import math
## this is how you get the math module

import math

print(math.floor(2.9))
OUTPUT: 2

print(math.ceil(2.9))
OUTPUT: 3

## MATH Module methods
# https://python.readthedocs.io/en/stable/library/math.html


#### IF Statements (Conditions)
## if it's hot
    # It's a hot
    # Drink plenty of water
## Otherwise if it's cold
    # It's a cold day
    # Wear warm clothes
## Otherwise
    # It's a lovely day

is_hot = True

if is_hot:
    print("It's a hot day")
    print("Drink plenty of water")
print("Enjoy your day")

OUTPUT:
It's a hot day
Drink plenty of water
Enjoy your day


#
is_hot = False

if is_hot:
    print("It's a hot day")
    print("Drink plenty of water")
else:
    print("It's a cold day")
    print("Wear warm clothes")
print("Enjoy your day")

OUTPUT:
It's a cold day
Wear warm clothes
Enjoy your day




#
is_hot = False
is_cold = False

if is_hot:
    print("It's a hot day")
    print("Drink plenty of water")
elif is_cold:
    print("It's a cold day")
    print("Wear warm clothes")
else:
    print("It's a lovely day")
print("Enjoy your day")

OUTPUT:
It's a lovely day
Enjoy your day


##### House Example
## Price of a house is $1M
### If the buyer has good credit, they need to put down 10%
### Otherwise, they need to put down a 20% down payment

good_credit = True

if good_credit:
    print("Down payment: $" + str(int(1000000 * .10)))
else:
    print("Down payment: $" + str(int(1000000 * .20)))
    
OUTPUT:
Down payment: $100000



good_credit = False

if good_credit:
    print("Down payment: $" + str(int(1000000 * .10)))
else:
    print("Down payment: $" + str(int(1000000 * .20)))

OUTPUT:
Down payment: $200000


price = 1000000
good_credit = False

if good_credit:
    down_payment = 0.1 * price
else:
    down_payment = 0.2 * price
print(f"Down payment: ${int(down_payment)}")
OUTPUT:
Down payment: $200000


##### Logical Operators
#AND#
## if applicant has high income AND good income
###eligible for a loan

has_high_income = True
has_good_credit = True

if has_high_income and has_good_credit:
    print("Eligible for loan")
else:
    print("Sorry, not eligible for loan")
OUTPUT: Eligible for loan


has_high_income = True
has_good_credit = False

if has_high_income and has_good_credit:
    print("Eligible for loan")
else:
    print("Sorry, not eligible for loan")
OUTPUT: Sorry, not eligible for loan


has_high_income = False
has_good_credit = True

if has_high_income and has_good_credit:
    print("Eligible for loan")
else:
    print("Sorry, not eligible for loan")
OUTPUT: Sorry, not eligible for loan


has_high_income = False
has_good_credit = False

if has_high_income and has_good_credit:
    print("Eligible for loan")
else:
    print("Sorry, not eligible for loan")
OUTPUT: Sorry, not eligible for loan


##or

has_high_income = True
has_good_credit = True

if has_high_income or has_good_credit:
    print("Eligible for loan")
else:
    print("Sorry, not eligible for loan")
    
OUTPUT: Eligible for loan


has_high_income = False
has_good_credit = True

if has_high_income or has_good_credit:
    print("Eligible for loan")
else:
    print("Sorry, not eligible for loan")
    
OUTPUT: Eligible for loan


has_high_income = True
has_good_credit = False

if has_high_income or has_good_credit:
    print("Eligible for loan")
else:
    print("Sorry, not eligible for loan")
    
OUTPUT: Eligible for loan


has_high_income = False
has_good_credit = False

if has_high_income or has_good_credit:
    print("Eligible for loan")
else:
    print("Sorry, not eligible for loan")
    
OUTPUT: Sorry, not eligible for loan


## and : both True
## or : at least one True
## not : makes anything inverse

a = True
b = not False

if a and b:
    print('hey')
else:
    print('nope')

OUTPUT: hey


## Comparison Operators
## if temperature is greater than 30, it's a hot day
## otherwise if it's less than 10, it's a cold day
## otherwise, it's neither hot nor cold

temp = 31

if temp > 30:
    print("It's a hot day")
elif temp < 10:
    print("It's a cold day")
else:
    print("It's neither hot nor cold")
OUTPUT: It's a hot day  


temp = 29

if temp > 30:
    print("It's a hot day")
elif temp < 10:
    print("It's a cold day")
else:
    print("It's neither hot nor cold")   
OUTPUT: It's neither hot nor cold


temp = 9

if temp > 30:
    print("It's a hot day")
elif temp < 10:
    print("It's a cold day")
else:
    print("It's neither hot nor cold")
OUTPUT: It's a cold day

## temp > 30 is an expression (boolean expression)
## expression because it's a piece of code that produces a value

## Operators are as follows:
## > Greater than
## < Less than
## <= Less than or equal to
## >= Greater than or equal to
## == Equal to
## = this is an assignement statement, so it will cause an error if put into a conditional statement like this one.
    ### it would change the value of temp
## != not equal to



## if name is less than 3 characters long
    ## name must be at least 3 characters
## Otherwise if it's more than 50 characters long
    ## name can be a maximum of 50 characters
## Otherwise
    ## name looks good

name = input("Please enter your name here: ")

if len(name) < 3:
    print("Name must be at least 3 characters long")
elif len(name) > 50:
    print("Name cannot be more than 50 characters long")
else:
    print(f"Nice to meet you {name}, your name looks good!")


###############################NOT WORKING########################
### Build a program that has an input that a person can
### then ask for if it is kilograms or pounds

name = input("Hello there, what is your name? ")
print(f"Thank you {name}, nice to meet you!")
weight = input(f"{name}, how much do you weigh? ")
str_weight = str(weight)
print(f"Okay {name}, you weigh {weight}, is that in pounds (lbs) or kilograms (kg)? ")
weight_type = input("Please, type L for pounds or K for kilograms: ")

if weight_type == "L" or "l":
    print(f"Thank you for that {name}.")
    print(f"You are {weight} lbs., that is {float(weight) * 0.45} kg.")
elif weight_type == "K" or "k":
    print(f"Thank you for that {name}.")
    print(f"You are {weight} kg, that is {float(weight) * 2.2} lbs.")
else:
    print(f"Oops, sorry that is an invalid response {name}.")
    print(f"{name}, please type L for pounds or K for kilograms.")
    print(input("L or K: "))
##################################NOT WORKING#########################    
weight = int(input('Weight: '))
unit = input('(L)bs or (K)g: ')
if unit.upper() == "L":
    converted = weight * 0.45
    print(f"You are {converted} kilos")
else:
    converted = weight / 0.45
    print(f"You are {converted} pounds.")


##### While loops

##while condition:
   ## ...
## while a condition is true, continue this loop

i = 1
while i <= 5:
    print(i)
    i += 1
print("DONE")


## Fixed it with a while loop

name = input("Hello there, what is your name? ")
print(f"Thank you {name}, nice to meet you!")
weight = input(f"{name}, how much do you weigh? ")
str_weight = str(weight)
print(f"Okay {name}, you weigh {weight}, is that in pounds (lbs) or kilograms (kg)? ")
type = "a"
type = input("Please, type L for pounds or K for kilograms: ")
type = type.upper()

if type == 'L':
    print(f"Thank you for that {name}.")
    print(f"You are {weight} lbs., that is {int(float(weight) * 0.45)} kg.")
elif type == 'K':
    print(f"Thank you for that {name}.")
    print(f"You are {weight} kg, that is {int(float(weight) * 2.2)} lbs.")
else:
    while type != "L" or type != "K":
        print(f"Oops, that is an invalid response {name}.")
        print(f"{name}, please type L for pounds or K for kilograms.")
        type = input("(L)bs or (K)g: ")
        type = type.upper()
        if type == 'L':
            print(f"Thank you for that {name}.")
            print(f"You are {weight} lbs., that is {int(float(weight) * 0.45)} kg.")
            break;
        elif type == 'K':
            print(f"Thank you for that {name}.")
            print(f"You are {weight} kg, that is {int(float(weight) * 2.2)} lbs.")
            break;
        else:
            type = type

































