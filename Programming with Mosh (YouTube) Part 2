## While loops continued
i = 1
while i <= 5:
    print('*' * i)
    i = i + 1
print("Done")

## Guessing Game
secret_number = 7
guess_count = 0
guess_limit = 3
guess_count_down = 3
print('''The rules of the game are:
You pick a number between 1-1000
You have 3 guesses to get it right
Good luck!''')
while guess_count < guess_limit:
    guess = int(input('Guess a number: '))
    guess_count += 1
    guess_count_down -= 1
    print(f"Wrong... {guess_count_down} guess(es) left.")
    if guess == secret_number:
        print("YOU WON!")
        break;
else:
    print('''
Sorry, you lose.''')



## Car Game
command = ""
while True:
    command = input("> ").lower()
    if command == "start":
        print("Car started...")
    elif command == "stop":
        print("Car stopped.")
    elif command == "help":
        print("""
start - to start the car
stop - to stop the car
quit - to quit
        """)
    elif command == "quit":
        break;
    else:
        print("Sorry I don't understand that..")
        
        

command = ""
started = False
while True:
    command = input("> ").lower()
    if command == "start":
        if started:
            print("Car is already started!")
        else:
            started = True
            print("Car started...")
    elif  command == "stop":
        if not started:
            print("Car is already stopped!")
        else:
            print("Car stopped.")
            started = False
    elif command == "help":
        print("""
start - to start the car
stop - to stop the car
quit - to quit
        """)
    elif command == "quit":
        break
    else:
        print("Sorry, I don't understand that...")



## while loops are to execute a block of code multiple times
##### for loops
## iterate (repeat) over items of a collection such as a string
## because a string is a sequence of characters, so it looks like a collection
# after the for, you define a variable, a loop variable
# in each iteration, this variable will hold one item

for item in 'Python':
    print(item)


## Define a list using square brackets, like so:
## [] ... you can have a list of items, like products, names, emails, numbers.. so on

for item in ['Mosh', 'John', 'Sarah']:
    print(item)

for num in [1, 2 , 3, 4]:
    print(num)

for numbers in range(10):
    print(numbers)
## 10 is not included

for numbers in range(5, 10, 2):
    print(numbers)
# here the first number starts at 5, the last ends at 9 (before 10).
# lastly it skips 2 numbers at a time.



### to print the end result of sum of all prices in prices
prices = [10, 20, 30]

total = 0
for price in prices:
    total += price
print(f"Total: {total}")

## if you want a running total each time the price is calculated
prices = [10, 20, 30]

total = 0
for price in prices:
    total += price
    print(f"Total: {total}")


## Nested loops
## adding one loop inside another loop
## with these you can add coordinates like so:
## (x, y) ----> (0, 0), (0, 1), (0, 2), (1, 0), (2, 0), (3, 0)

for x in range(4):
    for y in range (3):
        print(f"({x}, {y})")

## this executes as, the first iteration of the outer loop x is 0
## the second line of code is a new loop, an inner loop, the first iteration y is 0
## then it will print 0,0 in the terminal
## then it will jump back up to the inner loop and go up to 2 (quits before hitting 3)
## once it hits that limit, it will jump back to the outer loop and go through the same process




### List Methods
## List Functions
### Operations that can be performed on a list

numbers = [1, 5, 4, 6, 3, 4]

numbers.append(13)
## .append() will add the number to the end of the list

numbers.insert(3,22)
## .insert() will give you the option to add it in whatever position
## you'd like. the first number is the position then a comma will
## allow you to go to number you want to put in.

numbers.pop(0)
### .pop() will remove a value at the position you want to remove it from
## if left without a number in the () then it will remove the last item

numbers.remove(4)
## to remove an item, type .remove() and the number in which you
## want to remove from the list
## here, it only removes the first one it comes across.

#numbers.clear()
## the .clear() method, clears all items from the list.

print(numbers)


numbers = [5, 2, 1, 7, 4]

print(50 in numbers)
## comes with boolean "False" value

## print(numbers.index(50))
## if you were to run an index for 50, it would come as an error
## saying ValueError: 50 is not in list

numbers = [5, 2, 1, 5, 7, 4]

print(numbers.count(5))
## This will return the number of times 5 appears in the list
## .count()


numbers = [5, 2, 1, 5, 7, 4]

new_numbers = numbers.copy()

numbers.sort()
## in order to sort going from least to greatest, use the .sort() method
numbers.reverse()
## using the .reverse() method will sort them (in this case) from least to greatest or if
## there was no sort before, it would be the mirror image of the list
## for instance [5, 4, 6, 7] becomes [7, 6, 4, 5]

print(new_numbers)
print(numbers)



## Write a program that removes the duplicates in a list

list = [3, 4, 5, 8, 2, 3, 55, 46, 23, 1, 3, 4, 5, 8, 2]

new_list = []

for num in list:
    num_in = num in new_list
    if num_in is False:
        new_list.append(num)

print(new_list)


### Mosh's
## Write a program that removes the duplicates in a list

numbers = [2, 2, 4, 6, 3, 4, 6, 1]
uniques = []

for number in numbers:
    if number not in uniques:
        uniques.append(number)
print(uniques)



##### Tuples
## Similar to list, to store a list of items
## However they cannot be modified.
## Immutable - cannot be mutated.
## __dict__ these methods are called "Magic Methods"
## They are more advanced
## Tuples are good for when you want to make sure you don't
## accidentally modify your list.
numbers = (1, 2, 3)
# number[0] = 10 will cause and error because it can't change the value in a truple
# with tuples you can only use the .count() or .index() methods
print(numbers)



#### Unpacking
## can be used in tuples or lists

coordinates = (1, 2, 3)
## created a tuple
## we want to say this:
## coordinates[0]  coordinates[1] * coordinates[2]
#x = coordinates[0]
#y = coordinates[1]
#z = coordinates[2]
## Better to do this but unpacking is even better!
x, y, z = coordinates
print(x)
print(y)
print(z)
coordinates2 = [55, 77, 57]
a, b, c = coordinates2
print(a)
print(b)
print(c)



### Dictionaries in python
## You want to put the following values into a dictionary
# Name: John Smith
# Email: john@gmail.com
# Phone: 7283039332

#customer = {}
# the {} allow you to add a dictionary
# each key should be unique. you cannot have multiple of a key

customer = {
    "name": "John Smith",
    "age": 30,
##  "age": 40, ## This would come up with an error, because it needs to be unique
    "is verified": True
}
print(customer['name'])
print(customer['age'])
print(customer["is verified"])
print(customer)
## print(customer[0])
### this does not work. as you can't find it by it's index





customer = {
    "name": "John Smith",
    "age": 30,
    "is verified": True
}
print(customer.get('birthdate'))
## the .get() method will return "None" rather than an error
## it helps when searching for the value
print(customer.get('birthdate', "Jan 1 1980"))
## if it returns no value, you can also assign a value,
## if you put the common (,) after the first look up variable
print(customer.get("name"))
customer["name"] = "Jack Smith"
print(customer.get("name"))
## Here you can see you can update a value in the dictionary







