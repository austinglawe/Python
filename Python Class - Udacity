####    Introduction to Python Programming    ####

## Why Python Programming
History of Python - https://en.wikipedia.org/wiki/History_of_Python

Programming in python
- Case Sensitive
- Spacing matters
- Use error messages to help you learn

______________________________________________________________________________
Part 2. Data Types and Operators


## Introduction 2.1

-- Data Types
- Integers, Floats, Booleans, Strings
-- Operators
- Arithmetic, Assignment, Assignment, Comparison, Logical
-- Built-In Functions, Type Conversion
-- Whitespace and Style Guidelines

print()



## Arithmetic Operators 2.2

+ (Addition)
- (subtraction) 
* (Multiplication)
/ (Division)
% (Modulo, the remainder after dividing)
// (Integer Division, divides and rounds down to the nearest integer)
** Exponentatiation (note that ^ does not do this operation, as you might have seen in other languages)
^ (bitwise XOR) not exponentatiation

-- Regular order of operations apply
-- Math Refresher --> https://www.nctm.org/classroomresources/
-- More Special operators ---> https://wiki.python.org/moin/BitwiseOperators

print(3+5)
8 (output)

print(7 // 2)
3

print(-7 // 2)
-4

("//" always rounds DOWN)



## Quiz: Arithmetic Operators

It's time to try a calculation in Python!
--My electricity bills for the last three months have been $23, $32 and $64. What is the average monthly electricity bill over the three month period? Write an expression to calculate the mean, and use print() to view the result.
# Write an expression that calculates the average of 23, 32 and 64
# Place the expression in this print statement

Answer: print((23 + 32 + 64)/3)

-In this quiz you're going to do some calculations for a tiler. Two parts of a floor need tiling. One part is 9 tiles wide by 7 tiles long, the other is 5 tiles wide by 7 tiles long. Tiles come in packages of 6.
-[1]-How many tiles are needed?
-[2]-You buy 17 packages of tiles containing 6 tiles each. How many tiles will be left over?

# Fill this in with an expression that calculates how many tiles are needed.

Answer: print(9*7 + 5*7)

# Fill this in with an expression that calculates how many tiles will be left over.

Answer: print(17*6 - (9*7 + 5*7))

--Which of these lines of Python code are well formatted? How would you improve the readability of the codes that don't use good formatting? (Choose all that apply)
[] print(((3+ 32))+ -15//2)
[x] print((17 - 6)%(5 + 2))
[] print ((1 + 2 + 4) / 13)
[x] print(4/2 - 7*7)

####FEEDBACK:
###Well done on thinking about good Python formatting! Practicing good formatting when coding is the best way to get good at it. Here is what we thought:
   The first one isn't well formatted; it has some extra spaces, extra parentheses and an extra +. It would look much clearer as
   print((3 + 32) - 15//2)
   The second one looks good, it's got extra spaces around the - and + to help with readability.
   The third one looks quite clear, though it could be a bit better by removing the space between print and ( and the spaces around the /.
   print((1 + 2 + 4)/13)
   The final one looks fine.



## Variables and Assignment Operators 2.5

mv_population = 74728
   ^          ^   ^
   |          |   |
Variable      |   variable
name        assignment operator

x = y is not equal to y = x
whatever is on the left side of assignment operator is now a name for the variable on the right side
but this works out:
x = 2
y = x
print(y)
OUTPUT is 2

if you try to access a value of a variable that was never defined, you will get this error message
NameError: name 'z' is not defined
for example:
x = 2
y = z
print(y)
OUTPUT is NameError: name 'z' is not defined

For assigning variables this
x = 2
y = 3
z = 5
is the same as
x, y, z = 2, 3, 5

BE descriptive with variable names

-only use ordinary letters, numbers, or in your variable's names
like:
table_6
table6
NOT THESE:
table 6 - because it can't have spaces
6table - needs to start with letter or underscore (_)
-you can't use reserved words or build-in identifiers
-you should use all lowercase letters and underscores to separate words
---Table of Python's reserved words --> https://docs.python.org/3/reference/lexical_analysis.html#keywords
And the keywords are:
False        await         else        import         pass
None         break         except      in             raise
True         class         finally     is             return
and          continue      for         lambda         try
as           def           from        nonlocal       while
assert       del           global      not            with
async        elif          if          or             yield

You can reassign variable names and they will be the most recently used:
mv_population = 74728
mv_population = 78128
print(mv_population) # 78128
                     ^
                   this can be used to say "the answer is..."
mv_population = 74728
mv_population = mv_population + 4000 - 600
# 78128

or 
mv_popultaion = 74728
mv_population += 4000 - 600

the += is to say the same as the above example, (mv_population = mv_population + 4000 - 600)
+=       *=          %=
-=       /=          **=
Other Assignment Operators ---> https://www.programiz.com/python-programming/operators
== (is equal to)
!= (is not equal to)
> (Greater than)
< (Less than)
>= (Greater than or equal to)
<= (Less than or equal to)



## Quiz: Variables and Assignment Operators

--Now it's your turn to work with variables. The comments in this quiz (the lines that begin with #) have instructions for creating and modifying variables. After each comment write a line of code that implements the instruction.
(Note that this code uses scientific notation to define large numbers. 4.445e8 is equal to 4.445 *10* * 8 which is equal to 444500000.0)
----Scientific Notation --------> https://en.wikipedia.org/wiki/Scientific_notation

# The current volume of a water reservoir (in cubic metres)
reservoir_volume = 4.445e8
# The amount of rainfall from a storm (in cubic metres)
rainfall = 5e6


# decrease the rainfall variable by 10% to account for runoff
rainfall *= 0.9

# add the rainfall variable to the reservoir_volume variable
reservoir_volume += rainfall

# increase reservoir_volume by 5% to account for stormwater that flows
# into the reservoir in the days following the storm
reservoir_volume *= 1.05

# decrease reservoir_volume by 5% to account for evaporation
reservoir_volume *= 0.95

# subtract 2.5e5 cubic metres from reservoir_volume to account for water
# that's piped to arid regions.
reservoir_volume -= 2.5e5

# print the new value of the reservoir_volume variable
print(reservoir_volume)

--How does changing the value of a variable affect another variable that was defined in terms of it? Let's look at an example.
We're intentionally not providing a place to execute the code here, because we want to help you practice the important skill of walking through lines of code by hand.
Each line of code executes in order, one at a time, with control going from one line to the next.
>>> carrots = 24
>>> rabbits = 8
>>> crs_per_rab = carrots/rabbits
Now we add a new 4th line to this code, that assigns a new value to the rabbits variable:
>>> rabbits = 12
----If we now add this new 5th line of code to the above, what will the output be?
>>> print(crs_per_rab)	
[] 0.5
[] 2.0
[x] 3.0
[] None of the above

--Here is a list of U.S. states in order of the date they entered the Union. Say you wanted to create a variable for Delaware and assign it a value to signify that it joined the Union first. Which of the following are valid variable names and assignments in Python?
---> https://en.wikipedia.org/wiki/List_of_U.S._states_by_date_of_admission_to_the_Union

[] del = 1
[x] delaware = 1
[] 1 de = first
[x] de = 1
###The first option isn't valid because del is a reserved word in Python.
   The third option isn't valid because variable names canâ€™t have spaces and need to start with a letter or underscore.



## Integers and Floats  2.8

print(3/4)
0.75

int - integer (whole number. not decimal points)
float is a real number that allows us to use fractional values
(decimals or floating point values
they are two data types and used as:
int
float

----check types by using type, for example:
print(type(4))
<class 'int'>

print(type(4.3))
<class 'float'>

operations with an int and a float ALWAYS produces a float
print(3 + 2.5)
5.5

print(int(49.7))
49
when converting a float to an int, the part after the decimal is lopped off. no rounding occurs

when converting an int to a float, it will always have a decimal
print(float(3520 + 3239))
6759.0 

Integers can be used for
--number of people

all the floats in python are more of an approximation
for instance
print(0.1 + 0.1 + 0.1)
0.30000000000000004

it's not exactly 0.3 like you might assume, because python is slightly more for all floats
(Floating Point Approximations) - more here -------> https://docs.python.org/3/tutorial/floatingpoint.html

print(4 + 5)
is the same as 
print(                                            4 + 5)
but they are not equally good lines of code, because they are harder to read

whenever you use the print function, put the ( directly after print like so:
print(
and don't put spaces immediately inside of the paratheses either
so don't do this
print( 3 + 5) --- the immediate space within the paratheses should be avoided
don't do this
print (3 + 5) --- the ( is not directly placed after print
if order of operations are needed, it may be better to keep the higher priority closer together too
like so:
print(3*7 - 1)  ----instead of  print(3 * 7 - 1)
or 
print(4 + 5*9)  ---instead of print(4 + 5 * 9)
try to limit yourself to lines of code of 79-99 characters long
PEP8 Guidelines is good for helping others and yourself read
PEP8 Guidelines ----> https://peps.python.org/pep-0008/
https://github.blog/2022-06-08-sunsetting-atom/
https://softwareengineering.stackexchange.com/questions/148677/why-is-80-characters-the-standard-limit-for-code-width



## Quiz: Integers and Floats  2.9
      int vs. float
      Quiz Question
--In the fishy situation below, some of the quantities are of type int and some are of type float. Check all the ones that should be of type float.
[] How many people came on your fishing trip
[x] Length of a fish you caught, in meters
[] Number of fish caught on a fishing trip
[x] Length of time it took to catch the first fish, in hours

What happens if you divide by zero in Python? Try it out! Test run this code and see what happens.
The error below appears:
Traceback (most recent call last): File "/tmp/workspaces/4f950625-cb2a-463a-b969-981824be6c26/quiz.py", line 1, in <module> print(5/0) ZeroDivisionError: division by zero

##NOTE:
Here's what you should have seen when you submitted the Divide by Zero code above:
##Traceback (most recent call last):
  File "/tmp/vmuser_tnryxwdmhw/quiz.py", line 1, in <module>
    print(5/0)

ZeroDivisionError: division by zero```

Traceback means "What was the programming doing when it broke"!   This part is usually less helpful than the very last line of your error.  
Though you can dig through the rest of the error, looking at just the final line `ZeroDivisionError`, and the message says we divided by zero. Python is enforcing the rules of arithmetic! 
In general, there are two types of errors to look out for

* **Exceptions**
* **Syntax**

An **Exception** is a problem that occurs when the code is running, 
but a 'Syntax Error' is a problem detected when Python checks the code before it runs it.  
For more information, see the Python tutorial page on [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).



## Booleans, Comparison Operators, and Logical Operators
































































