####    Introduction to Python Programming    ####
This course is taught by Juno Lee.
https://www.udacity.com/course/introduction-to-python--ud1110


## Why Python Programming
History of Python - https://en.wikipedia.org/wiki/History_of_Python

Programming in python
- Case Sensitive
- Spacing matters
- Use error messages to help you learn

______________________________________________________________________________
Part 2. Data Types and Operators


## Introduction 2.1

-- Data Types
- Integers, Floats, Booleans, Strings
-- Operators
- Arithmetic, Assignment, Assignment, Comparison, Logical
-- Built-In Functions, Type Conversion
-- Whitespace and Style Guidelines

print()



## Arithmetic Operators 2.2

+ (Addition)
- (subtraction) 
* (Multiplication)
/ (Division)
% (Modulo, the remainder after dividing)
// (Integer Division, divides and rounds down to the nearest integer)
** Exponentatiation (note that ^ does not do this operation, as you might have seen in other languages)
^ (bitwise XOR) not exponentatiation

-- Regular order of operations apply
-- Math Refresher --> https://www.nctm.org/classroomresources/
-- More Special operators ---> https://wiki.python.org/moin/BitwiseOperators

print(3+5)
8 (output)

print(7 // 2)
3

print(-7 // 2)
-4

("//" always rounds DOWN)



## Quiz: Arithmetic Operators    2.3

It's time to try a calculation in Python!
--My electricity bills for the last three months have been $23, $32 and $64. What is the average monthly electricity bill over the three month period? Write an expression to calculate the mean, and use print() to view the result.
# Write an expression that calculates the average of 23, 32 and 64
# Place the expression in this print statement

Answer: print((23 + 32 + 64)/3)

-In this quiz you're going to do some calculations for a tiler. Two parts of a floor need tiling. One part is 9 tiles wide by 7 tiles long, the other is 5 tiles wide by 7 tiles long. Tiles come in packages of 6.
-[1]-How many tiles are needed?
-[2]-You buy 17 packages of tiles containing 6 tiles each. How many tiles will be left over?

# Fill this in with an expression that calculates how many tiles are needed.

Answer: print(9*7 + 5*7)

# Fill this in with an expression that calculates how many tiles will be left over.

Answer: print(17*6 - (9*7 + 5*7))

--Which of these lines of Python code are well formatted? How would you improve the readability of the codes that don't use good formatting? (Choose all that apply)
[] print(((3+ 32))+ -15//2)
[x] print((17 - 6)%(5 + 2))
[] print ((1 + 2 + 4) / 13)
[x] print(4/2 - 7*7)

####FEEDBACK:
###Well done on thinking about good Python formatting! Practicing good formatting when coding is the best way to get good at it. Here is what we thought:
   The first one isn't well formatted; it has some extra spaces, extra parentheses and an extra +. It would look much clearer as
   print((3 + 32) - 15//2)
   The second one looks good, it's got extra spaces around the - and + to help with readability.
   The third one looks quite clear, though it could be a bit better by removing the space between print and ( and the spaces around the /.
   print((1 + 2 + 4)/13)
   The final one looks fine.



## Variables and Assignment Operators 2.5

mv_population = 74728
   ^          ^   ^
   |          |   |
Variable      |   variable
name        assignment operator

x = y is not equal to y = x
whatever is on the left side of assignment operator is now a name for the variable on the right side
but this works out:
x = 2
y = x
print(y)
OUTPUT is 2

if you try to access a value of a variable that was never defined, you will get this error message
NameError: name 'z' is not defined
for example:
x = 2
y = z
print(y)
OUTPUT is NameError: name 'z' is not defined

For assigning variables this
x = 2
y = 3
z = 5
is the same as
x, y, z = 2, 3, 5

BE descriptive with variable names

-only use ordinary letters, numbers, or in your variable's names
like:
table_6
table6
NOT THESE:
table 6 - because it can't have spaces
6table - needs to start with letter or underscore (_)
-you can't use reserved words or build-in identifiers
-you should use all lowercase letters and underscores to separate words
---Table of Python's reserved words --> https://docs.python.org/3/reference/lexical_analysis.html#keywords
And the keywords are:
False        await         else        import         pass
None         break         except      in             raise
True         class         finally     is             return
and          continue      for         lambda         try
as           def           from        nonlocal       while
assert       del           global      not            with
async        elif          if          or             yield

You can reassign variable names and they will be the most recently used:
mv_population = 74728
mv_population = 78128
print(mv_population) # 78128
                     ^
                   this can be used to say "the answer is..."
mv_population = 74728
mv_population = mv_population + 4000 - 600
# 78128

or 
mv_popultaion = 74728
mv_population += 4000 - 600

the += is to say the same as the above example, (mv_population = mv_population + 4000 - 600)
+=       *=          %=
-=       /=          **=
Other Assignment Operators ---> https://www.programiz.com/python-programming/operators
== (is equal to)
!= (is not equal to)
> (Greater than)
< (Less than)
>= (Greater than or equal to)
<= (Less than or equal to)



## Quiz: Variables and Assignment Operators  2.6

--Now it's your turn to work with variables. The comments in this quiz (the lines that begin with #) have instructions for creating and modifying variables. After each comment write a line of code that implements the instruction.
(Note that this code uses scientific notation to define large numbers. 4.445e8 is equal to 4.445 *10* * 8 which is equal to 444500000.0)
----Scientific Notation --------> https://en.wikipedia.org/wiki/Scientific_notation

# The current volume of a water reservoir (in cubic metres)
reservoir_volume = 4.445e8
# The amount of rainfall from a storm (in cubic metres)
rainfall = 5e6


# decrease the rainfall variable by 10% to account for runoff
rainfall *= 0.9

# add the rainfall variable to the reservoir_volume variable
reservoir_volume += rainfall

# increase reservoir_volume by 5% to account for stormwater that flows
# into the reservoir in the days following the storm
reservoir_volume *= 1.05

# decrease reservoir_volume by 5% to account for evaporation
reservoir_volume *= 0.95

# subtract 2.5e5 cubic metres from reservoir_volume to account for water
# that's piped to arid regions.
reservoir_volume -= 2.5e5

# print the new value of the reservoir_volume variable
print(reservoir_volume)

--How does changing the value of a variable affect another variable that was defined in terms of it? Let's look at an example.
We're intentionally not providing a place to execute the code here, because we want to help you practice the important skill of walking through lines of code by hand.
Each line of code executes in order, one at a time, with control going from one line to the next.
>>> carrots = 24
>>> rabbits = 8
>>> crs_per_rab = carrots/rabbits
Now we add a new 4th line to this code, that assigns a new value to the rabbits variable:
>>> rabbits = 12
----If we now add this new 5th line of code to the above, what will the output be?
>>> print(crs_per_rab)	
[] 0.5
[] 2.0
[x] 3.0
[] None of the above

--Here is a list of U.S. states in order of the date they entered the Union. Say you wanted to create a variable for Delaware and assign it a value to signify that it joined the Union first. Which of the following are valid variable names and assignments in Python?
---> https://en.wikipedia.org/wiki/List_of_U.S._states_by_date_of_admission_to_the_Union

[] del = 1
[x] delaware = 1
[] 1 de = first
[x] de = 1
###The first option isn't valid because del is a reserved word in Python.
   The third option isn't valid because variable names canâ€™t have spaces and need to start with a letter or underscore.



## Integers and Floats  2.8

print(3/4)
0.75

int - integer (whole number. not decimal points)
float is a real number that allows us to use fractional values
(decimals or floating point values
they are two data types and used as:
int
float

----check types by using type, for example:
print(type(4))
<class 'int'>

print(type(4.3))
<class 'float'>

operations with an int and a float ALWAYS produces a float
print(3 + 2.5)
5.5

print(int(49.7))
49
when converting a float to an int, the part after the decimal is lopped off. no rounding occurs

when converting an int to a float, it will always have a decimal
print(float(3520 + 3239))
6759.0 

Integers can be used for
--number of people

all the floats in python are more of an approximation
for instance
print(0.1 + 0.1 + 0.1)
0.30000000000000004

it's not exactly 0.3 like you might assume, because python is slightly more for all floats
(Floating Point Approximations) - more here -------> https://docs.python.org/3/tutorial/floatingpoint.html

print(4 + 5)
is the same as 
print(                                            4 + 5)
but they are not equally good lines of code, because they are harder to read

whenever you use the print function, put the ( directly after print like so:
print(
and don't put spaces immediately inside of the paratheses either
so don't do this
print( 3 + 5) --- the immediate space within the paratheses should be avoided
don't do this
print (3 + 5) --- the ( is not directly placed after print
if order of operations are needed, it may be better to keep the higher priority closer together too
like so:
print(3*7 - 1)  ----instead of  print(3 * 7 - 1)
or 
print(4 + 5*9)  ---instead of print(4 + 5 * 9)
try to limit yourself to lines of code of 79-99 characters long
PEP8 Guidelines is good for helping others and yourself read
PEP8 Guidelines ----> https://peps.python.org/pep-0008/
https://github.blog/2022-06-08-sunsetting-atom/
https://softwareengineering.stackexchange.com/questions/148677/why-is-80-characters-the-standard-limit-for-code-width



## Quiz: Integers and Floats  2.9
      int vs. float
      Quiz Question
--In the fishy situation below, some of the quantities are of type int and some are of type float. Check all the ones that should be of type float.
[] How many people came on your fishing trip
[x] Length of a fish you caught, in meters
[] Number of fish caught on a fishing trip
[x] Length of time it took to catch the first fish, in hours

What happens if you divide by zero in Python? Try it out! Test run this code and see what happens.
The error below appears:
Traceback (most recent call last): File "/tmp/workspaces/4f950625-cb2a-463a-b969-981824be6c26/quiz.py", line 1, in <module> print(5/0) ZeroDivisionError: division by zero

##NOTE:
Here's what you should have seen when you submitted the Divide by Zero code above:
##Traceback (most recent call last):
  File "/tmp/vmuser_tnryxwdmhw/quiz.py", line 1, in <module>
    print(5/0)

ZeroDivisionError: division by zero```

Traceback means "What was the programming doing when it broke"!   This part is usually less helpful than the very last line of your error.  
Though you can dig through the rest of the error, looking at just the final line `ZeroDivisionError`, and the message says we divided by zero. Python is enforcing the rules of arithmetic! 
In general, there are two types of errors to look out for

* **Exceptions**
* **Syntax**

An **Exception** is a problem that occurs when the code is running, 
but a 'Syntax Error' is a problem detected when Python checks the code before it runs it.  
For more information, see the Python tutorial page on [Errors and Exceptions](https://docs.python.org/3/tutorial/errors.html).



## Booleans, Comparison Operators, and Logical Operators    2.10

bool - A boolean is a data type that can have a value of TRUE or FALSE
--boolean Algebra is a branch of algebra dealing with true or false
  George Bool, exists in almost every line of computer code

Can be used like this (though true and false usually should be used for more of a purpose):
the_sun_is_up = True
the_sun_is_blue = False

x = 42 > 43
print(x)
#False

Comparison Operators:
< (less than)
> (greater than)
<= (less than or equal to)
>= (greater than or equal to)
== (equal to) #notice the 2 = signs
!= (not equal to)
Logical Operators:
and  (evaluates if both sides are true)
or   (evaluates if at least one side is true) 
not  (inverses a boolean type)

for example:
age = 14
is_teen = age > 12 and age < 20           (is_teen = 14 > and 14 < 20)
print(is_teen)
# True

another:
age = 14
not_teen = not (age > 12 and age < 20)
print(not_teen)
# False

Symbol Use Case	   Bool	      Operation
5 < 3	               False	       Less Than
5 > 3	               True	       Greater Than
3 <= 3	            True	       Less Than or Equal To
3 >= 5	            False	       Greater Than or Equal To
3 == 5	            False        Equal To
3 != 5	            True	       Not Equal To

Logical Use	         Bool	        Operation
5 < 3 and 5 == 5	   False	         and - Evaluates if all provided statements are True
5 < 3 or 5 == 5	   True	         or - Evaluates if at least one of many statements is True
not 5 < 3	         True	         not - Flips the Bool Value

More on George Bool here ----> https://www.irishtimes.com/news/science/how-george-boole-s-zeroes-and-ones-changed-the-world-1.2014673



## Quiz: Booleans, Comparison Operators, and Logical Operators 2.11

Quiz: Which is denser, Rio or San Francisco?
Try comparison operators in this quiz! This code calculates the population densities of Rio de Janeiro and San Francisco.
--Write code to compare these densities. Is the population of San Francisco more dense than that of Rio de Janeiro? 
  Print True if it is and False if not.

sf_population, sf_area = 864816, 231.89
rio_population, rio_area = 6453682, 486.5

san_francisco_pop_density = sf_population/sf_area
rio_de_janeiro_pop_density = rio_population/rio_area

# Write code that prints True if San Francisco is denser than Rio, and False otherwise

san_francisco_vs_rio_de_janeiro = san_francisco_pop_density > rio_de_janeiro_pop_density
print(san_francisco_vs_rio_de_janeiro)

###Your comparison is correct. Nice work! I calculated my answer like this: print(san_francisco_pop_density > rio_de_janeiro_pop_density)
   Another is:
         if (san_francisco_pop_density > rio_de_janeiro_pop_density):
                  print (True)
         else:
                  print (False)
    
--Why do you think Python uses == for checking equality rather than =?
[] So that it is two characters long, like != is
[x] Because = is used to assign variables
[] Either one works
[] Because = is used to check if two values are approximately equal



## Strings     2.13

String - data type for immutable ordered sequences of characters (E.G. Letters, numbers, spaces, and symbols)
example:

print("hello") # double quotes
print('hello') # single quotes
# hello
# hello
--These print the same, as double or single quotes can work the same, in many cases

You can set a variable to be a string, similiar to how we did with numbers
for example:
welcome_message = "Hello, welcome to Udacity!"
print(welcome_message)
# Hello, welcome to Udacity!

If you want quotation marks within the string though, you need to use opposite of what you used
for example:
This does not work:
pet_halibut = "Why should I be tarred with the epithet "lonny" merely because I have a pet halibut?"
# SyntaxError: invalid syntax
This error message will appear

In the video above, at the 1:32 mark, the str is written as follows salesman = '"I think you\'re an encyclopedia salesman'", but the closing string literals should be double quotes " followed by single quotes '.
You can combine strings with a + sign     (becomes a concatenation)
For example:
first_word = "Hello"
second_word = "There"
print(first_word + second_word)
# HelloThere
--to print the space between the two,
first_word = "Hello"
second_word = "There"
print(first_word + " " + second_word)
# HelloThere

You can use * to repeat strings
word = "Hello"
print(word * 5)
# HelloHelloHelloHelloHello

subtraction and division do not work with strings:
TypeError: unsupported operand type(s) for /: 'str' and 'str'

len()
-built-in function that returns the length of an object (number of characters in a string)
for example:
udacity_length = len("Udacity")
print(udacity_length)
# 7

########## More Notes
Strings in Python are shown as the variable type str. You can define a string with either double quotes " or single quotes '. If the string you are creating actually has one of these two values in it, then you need to be careful to assure your code doesn't give an error.

>>> my_string = 'this is a string!'
>>> my_string2 = "this is also a string!!!"
You can also include a \ in your string to be able to include one of these quotes:

>>> this_string = 'Simon\'s skateboard is in the garage.'
>>> print(this_string)
Simon's skateboard is in the garage.
If we don't use this, notice we get the following error:

>>> this_string = 'Simon's skateboard is in the garage.'
  File "<ipython-input-20-e80562c2a290>", line 1
    this_string = 'Simon's skateboard is in the garage.'
                         ^
SyntaxError: invalid syntax
The color highlighting is also an indication of the error you have in your string in this second case. There are a number of other operations you can use with strings as well. In this video you saw a few:

>>> first_word = 'Hello'
>>> second_word = 'There'
>>> print(first_word + second_word)

HelloThere

>>> print(first_word + ' ' + second_word)

Hello There

>>> print(first_word * 5)

HelloHelloHelloHelloHello

>>> print(len(first_word))

5
Unlike the other data types you have seen so far, you can also index into strings, but you will see more on this soon! For now, here is a small example. Notice Python uses 0 indexing - we will discuss this later in this lesson in detail.

>>> first_word[0]

H

>>> first_word[1]

e
The len() function
len() is a built-in Python function that returns the length of an object, like a string. The length of a string is the number of characters in the string. This will always be an integer.

There is an example above, but here's another one:

print(len("ababa") / len("ab"))
2.5
You know what the data types are for len("ababa") and len("ab"). Notice the data type of their resulting quotient here.



## Quiz: Strings  2.14

--The line of code in the following quiz will cause a SyntaxError, thanks to the misuse of quotation marks. First run it with Test Run to view the error message. Then resolve the problem so that the quote (from Henry Ford) is correctly assigned to the variable ford_quote.
---> https://www.goodreads.com/author/quotes/203714.Henry_Ford
# TODO: Fix this string!
ford_quote = 'Whether you think you can, or you think you can't--you're right.'

ford_quote = "Whether you think you can, or you think you can't--you're right."
or
ford_quote = 'Whether you think you can, or you think you can\'t--you\'re right.'

--Weâ€™ve already seen that the type of objects will affect how operators work on them. What will be the output of this code?

coconut_count = "34"
mango_count = "15"
tropical_fruit_count = coconut_count + mango_count
print(tropical_fruit_count)

[] 49(and tropical_fruit_count is a string)
[] 49(and tropical_fruit_count is an integer)
[x] 3415(and tropical_fruit_count is a string)
[] 3415(and tropical_fruit_count is an integer)
-----NOTE-----
The correct answer is 3415, and tropical_fruit_count is a string. Thatâ€™s because even though the characters inside the strings coconut_count and mango_count are numbers, the values of the variable coconut_count and mango_count are strings, and are treated as strings when it comes to the + operator being applied.

--In this programming quiz, youâ€™re going to use what youâ€™ve learned about strings to write a logging message for a server.
Youâ€™ll be provided with example data for a user, the time of their visit and the site they accessed. You should use the variables provided and the techniques youâ€™ve learned to print a log message like this one (with the username, url, and timestamp replaced with values from the appropriate variables):
Yogesh accessed the site http://petshop.com/pets/reptiles/pythons at 16:20.
Use the Test Run button to see your results as you work on coding this piece by piece.

username = "Kinari"
timestamp = "04:50"
url = "http://petshop.com/pets/mammals/cats"
# TODO: print a log message using the variables above.
# The message should have the same format as this one:
# "Yogesh accessed the site http://petshop.com/pets/reptiles/pythons at 16:20."
------------------------------------
#username = "Yogesh"
#timestamp = "16:20"
#url = "http://petshop.com/pets/reptiles/pythons"

username = "Kinari"
timestamp = "04:50"
url = "http://petshop.com/pets/mammals/cats"

# TODO: print a log message using the variables above.
# The message should have the same format as this one:
# "Yogesh accessed the site http://petshop.com/pets/reptiles/pythons at 16:20."

message = username + " accessed the site " + url + " at " + timestamp + "."
print(message)

--Use string concatenation and the len() function to find the length of a certain movie star's actual full name. Store that length in the name_length variable. Don't forget that there are spaces in between the different parts of a name!
given_name = "William"
middle_names = "Bradley"
family_name = "Pitt"

name_length = #todo: calculate how long this name is

# Now we check to make sure that the name fits within the driving license character limit
# Nothing you need to do here
driving_license_character_limit = 28
print(name_length <= driving_license_character_limit)
--------------------------------------------------------
given_name = "William"
middle_names = "Bradley"
family_name = "Pitt"

name_length = len(given_name) + len(middle_names) + len(family_name) + 2

# Now we check to make sure that the name fits within the driving license character limit
# Nothing you need to do here
driving_license_character_limit = 28
print(name_length <= driving_license_character_limit)

---Note---
You calculated the correct value for name_length. Nice work! I calculated my answer like this: name_length = len(given_name + middle_names + family_name) + 2. The +2 accounts for the spaces in between each word.

--We've just used the len function to find the length of strings. What does the len function return when we give it the integer 835 instead of a string?
[] 835
[] 3
[] 2
[x] Error
--Note--
Nice! The error message generated reads: TypeError: object of type 'int' has no len(), which alludes to the fact that len only works on a "sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set)," as per the Python documentation.
--->https://docs.python.org/2/library/functions.html#len



## Type and Type Conversion   2.16
house_number = 13
street_name = "The Crescent"
town_home = "Belmont"
print(type(house_name)) # <class 'int'="">

address = str(house_number + " " + street_name + ", " + town_name
print(address) # 13 The Crescent, Belmont
You have seen four data types so far:

int
float
bool
string
You got a quick look at type() from an earlier video, and it can be used to check the data type of any variable you are working with.

>>> print(type(633))
int
>>> print(type(633.0))
float
>>> print(type('633'))
str
>>> print(type(True))
bool
You saw that you can change variable types to perform different operations. For example,

"0" + "5"
provides completely different output than

0 + 5
What do you think the below would provide?

"0" + 5
How about the code here:

0 + "5"
Checking your variable types is really important to assure that you are retrieving the results you want when programming.



## Quiz: Type and Type Conversion   2.17
Quiz Questions

--What type does this object have? "12". There is a coding environment further down this page that you can use for experimentation. Enter your code and run it with the "Test Run" button.
[x] str
[] float
[] int
[] bool
-The fact that this is in quotation marks gives it away this time, but if this was saved in a variable you might have to call the type() function directly on an object to discover its type.

--What type does this object have? 12.3 There is a coding environment further down this page that you can use for experimentation. Enter your code and run it with the "Test Run" button.
[] str
[x] float
[] int
[] bool
-The decimal point gives this one away - itâ€™s a float. Itâ€™s a number but not necessarily a whole number!

--What type does this object have? len("my_string") There is a coding environment further down this page that you can use for experimentation. Enter your code and run it with the "Test Run" button.
[] str
[] float
[x] int
[] bool
-This was a bit trickier. You can tell that "my_string" is itself a string because of the quotation marks. The length of a string is an integer - it is the count of the number of elements in the string.

--What type does this object have? "hippo" *12 There is a coding environment further down this page that you can use for experimentation. Enter your code and run it with the "Test Run" button.
[x] str
[] float
[] int
[] bool
-This is a string. If you werenâ€™t sure, look at the output of evaluating the expression:
>>> print("hippo"*12)
hippohippohippohippohippohippohippohippohippohippohippohippo
Multiplying a string by an integer gives a new string made up of that many copies of the original string - and the type is string.

-- In this quiz, youâ€™ll need to change the types of the input and output data in order to get the result you want.

Calculate and print the total sales for the week from the data provided. Print out a string of the form "This week's total sales: xxx", where xxx will be the actual total of all the numbers. Youâ€™ll need to change the type of the input data in order to calculate that total.
mon_sales = "121"
tues_sales = "105"
wed_sales = "110"
thurs_sales = "98"
fri_sales = "95"

#TODO: Print a string with this format: This week's total sales: xxx
# You will probably need to write some lines of code before the print statement.
----------------------------------------
mon_sales = "121"
tues_sales = "105"
wed_sales = "110"
thurs_sales = "98"
fri_sales = "95"

#TODO: Print a string with this format: This week's total sales: xxx
# You will probably need to write some lines of code before the print statement.

mon_sales = int(mon_sales)
tues_sales = int(tues_sales)
wed_sales = int(wed_sales)
thurs_sales = int(thurs_sales)
fri_sales = int(fri_sales)

week_sales = str(mon_sales + tues_sales + wed_sales + thurs_sales + fri_sales)
week_totals = "This week's total sales: " + week_sales
print(week_totals)

---Note---
You calculated the correct sum and formatted the string correctly. Nice work! I calculated my answer like this:

weekly_sales = int(mon_sales) + int(tues_sales) + int(wed_sales) + int(thurs_sales) + int(fri_sales)
weekly_sales = str(weekly_sales)  #convert the type back!!
print("This week's total sales: " + weekly_sales)



## String Methods    2.19

Method - A special type of function that "belongs" to an object
title()           Changes strings to have uppercase first letter of a word
islower()         checks to see if all letters are lowercase, true if so, false if there are any upper case letters

print("sebastian thrun".title())
full_name = "sebastian thrun"
print(full_name.islower())

# Sebastian Thrun
# True

inside () are called arguments, nothing in the paratheses means it was a disguised argument
in the above, it's disguised as the string object
for example:
print("One fish, two fish, red fish, blue fish.".count('fish'))
4

the argument inside the count method is 'fish' and it counts how many times fish appears in the string it's attached to

####MORE NOTES
String Methods
In this video you were introduced to methods. Methods are like some of the functions you have already seen:

len("this")
type(12)
print("Hello world")
These three above are functions - notice they use parentheses, and accept one or more arguments. Functions will be studied in much more detail in a later lesson!

A method in Python behaves similarly to a function. Methods actually are functions that are called using dot notation. For example, lower() is a string method that can be used like this, on a string called "sample string": sample_string.lower().

Methods are specific to the data type for a particular variable. So there are some built-in methods that are available for all strings, different methods that are available for all integers, etc.

Below is an image that shows some methods that are possible with any string.

my_string.
      capitalize()      encode()       format()       isalpha()      islower()      istitle()
      casefold()        endswith()     format_map()   isdecimal()    isnumeric()    isupper()
      center()          expandtabs()   index()        isdigit()      isprintable()  join()
      count()           find()         isalnum()      isidentifier() isspace()      ljust()           

Each of these methods accepts the string itself as the first argument of the method. However, they also could receive additional arguments, that are passed inside the parentheses. Let's look at the output for a few examples.

>>> my_string.islower()
True
>>> my_string.count('a')
2
>>> my_string.find('a')
3
You can see that the count and find methods both take another argument. However, the .islower() method does not accept another argument.

No professional has all the methods memorized, which is why understanding how to use documentation and find answers is so important. Gaining a strong grasp of the foundations of programming will allow you to use those foundations to use documentation to build so much more than someone who tries to memorize all the built-in methods in Python.

One important string method: format()
We will be using the format() string method a good bit in our future work in Python, and you will find it very valuable in your coding, especially with your print statements.

We can best illustrate how to use format() by looking at some examples:

Example 1 python print("Mohammed has {} balloons".format(27)) Example 1 Output txt Mohammed has 27 balloons Example 2 python animal = "dog" action = "bite" print("Does your {} {}?".format(animal, action)) Example 2 Output txt Does your dog bite? Example 3 python maria_string = "Maria loves {} and {}" print(maria_string.format("math", "statistics")) Example 3 Output txt Maria loves math and statistics

Notice how in each example, the number of pairs of curly braces {} you use inside the string is the same as the number of replacements you want to make using the values inside format().

More advanced students can learn more about the formal syntax for using the format() string method here.
-->https://docs.python.org/3.6/library/string.html#format-string-syntax



## String Methods    2.20

--What happens when you call a string method like islower() on a float object? For example, 13.37.islower().
  There is a playground workspace further down this page that you can use to experiment.
[] The float is returned unchanged
[] islower() returns True
[] islower() returns false
[x] An error occurs
---That's right, an error occurs. The islower() method is an attribute of string methods, but not floats. Different types of object have methods specific to their type. For example, floats have the is_integer() method which strings don't have.
You can learn more about strings and string methods by looking at the string method documentation.
You will find that the documentation is one of the most valuable resources for writing code, and not only when it comes to strings or writing code in Python! By reading and searching the documentation you can learn about data types and built-in functions as well as how to use them.
Give it a try now! Look up a few string methods (using the link above) and try them out in the programming playground below (using the Test Run button).
---> https://docs.python.org/3/library/stdtypes.html#string-methods

--Use the coding space below to practice using the format() string method. There are no right or wrong answers here, just practice!
# Write two lines of code below, each assigning a value to a variable


# Now write a print statement using .format() to print out a sentence and the 
#   values of both of the variables
------------------------------------------------------------------
# Write two lines of code below, each assigning a value to a variable

rob = "bob"
bob = "bily"

# Now write a print statement using .format() to print out a sentence and the 
#   values of both of the variables

print(bob + " " + rob.format())



## Another String Method - Split    2.21

Another important string method: split()
A helpful string method when working with strings is the .split method. This function or method returns a data container called a list that contains the words from the input string. We will be introducing you to the concept of lists in the next video.

The split method has two additional arguments (sep and maxsplit). The sep argument stands for "separator". It can be used to identify how the string should be split up (e.g., whitespace characters like space, tab, return, newline; specific punctuation (e.g., comma, dashes)). If the sep argument is not provided, the default separator is whitespace.

True to its name, the maxsplit argument provides the maximum number of splits. The argument gives maxsplit + 1 number of elements in the new list, with the remaining string being returned as the last element in the list. You can read more about these methods in the Python documentation too.

Here are some examples for the .split() method.

A basic split method:
new_str = "The cow jumped over the moon."
new_str.split()```
Output is:
```Python
['The', 'cow', 'jumped', 'over', 'the', 'moon.']```

2. Here  the separator is space, and the maxsplit argument is set to 3.
    ```Python
    new_str.split(' ', 3) ```
    Output is:
    ```Python
['The', 'cow', 'jumped', 'over the moon.']```

3. Using '.' or period as a separator.
```Python
new_str.split('.')```
Output is:
```Python
['The cow jumped over the moon', '']```

4. Using no separators but having a maxsplit argument of 3.
    ```Python
    new_str.split(None, 3)```
    Output is:
    ```Python
['The', 'cow', 'jumped', 'over the moon.']```



## Quiz: String Methods Practice 2.22

Below, we have a string variable that contains the first verse of the poem, If by Rudyard Kipling. Remember, \n is a special sequence of characters that causes a line break (a new line).
---> https://en.wikipedia.org/wiki/If%E2%80%94
verse = "If you can keep your head when all about you\n  Are losing theirs and blaming it on you,\nIf you can trust yourself when all men doubt you,\n  But make allowance for their doubting too;\nIf you can wait and not be tired by waiting,\n  Or being lied about, donâ€™t deal in lies,\nOr being hated, donâ€™t give way to hating,\n  And yet donâ€™t look too good, nor talk too wise:"
Use the code editor below to answer the following questions about verse and use Test Run to check your output in the quiz at the bottom of this page.
---> https://docs.python.org/2/library/string.html
1. What is the length of the string variable verse?
2. What is the index of the first occurrence of the word 'and' in verse?
3. What is the index of the last occurrence of the word 'you' in verse?
4. What is the count of occurrences of the word 'you' in the verse?

You will need to refer to Python's string methods documentation.
---
verse = "If you can keep your head when all about you\n  Are losing theirs and blaming it on you,\nIf you can trust yourself when all men doubt you,\n  But make allowance for their doubting too;\nIf you can wait and not be tired by waiting,\n  Or being lied about, donâ€™t deal in lies,\nOr being hated, donâ€™t give way to hating,\n  And yet donâ€™t look too good, nor talk too wise:"
print(verse)

# Use the appropriate functions and methods to answer the questions above
# Bonus: practice using .format() to output your answers in descriptive messages!
---------------------------------------------------------------------






